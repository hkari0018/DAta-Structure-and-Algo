***  Given a m x n grid filled with non-negative numbers, find a path from top left to bottom right, which minimizes the sum of all numbers along its path.

Note: You can only move either down or right at any point in time.  ***

int minPathSum(vector<vector<int>>& grid) {
        int rows=grid.size();
        int cols=grid[0].size();
        int cost[rows][cols];
        cost[0][0]=grid[0][0];
        
        for(int i=1;i<rows;i++){
            cost[i][0]=cost[i-1][0]+grid[i][0];
            
        }
        for(int i=1;i<cols;i++){
            cost[0][i]=cost[0][i-1]+grid[0][i];   
        }
        for (int i=1;i<rows;i++){
            for (int j=1;j<cols;j++){
                    cost[i][j]=grid[i][j] + min(cost[i-1][j],cost[i][j-1]);
            }
        }
        
        return cost[rows-1][cols-1];
        
    }
